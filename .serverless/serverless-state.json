{
  "service": {
    "service": "member-info-api",
    "serviceObject": {
      "name": "member-info-api"
    },
    "provider": {
      "stage": "stg",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)*?]+?)}",
      "name": "aws",
      "runtime": "nodejs12.x",
      "region": "us-east-1",
      "timeout": 30,
      "logRetentionInDays": 30,
      "deploymentBucket": "buzz-serverless-stg",
      "vpc": {
        "securityGroupIds": [
          "sg-0a7832481b33f6cf7"
        ],
        "subnetIds": [
          "subnet-0629f288aa4d26c44",
          "subnet-0d9db212407ee5a2d"
        ]
      },
      "logs": {
        "restApi": {
          "enableAccessLogging": false,
          "level": "INFO",
          "dataTrace": true
        }
      },
      "environment": {
        "LOGGING_LEVEL": "debug",
        "REGION": "us-east-1",
        "GET_LIFEUSER_POINTS": "https://stg.api.givesrewards.com/points",
        "GET_LIFEUSER_ACCOUNTS": "https://stg.api.givesrewards.com/account/accounts",
        "RDS_PROXY_ENDPOINT_GLOBAL": "rds-proxy-stg-glbl.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
        "RDS_IAM_USER_GLOBAL": "rds_proxy_stg_glbl",
        "RDS_DATABASE_GLOBAL": "bbglobal",
        "RDS_TEST": "= cqscgqylfsoo",
        "RDS_PROXY_FI_ENDPOINT": "rds-proxy-stg-fi.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
        "RDS_IAM_USER_FI": "rds_proxy_stg_fi",
        "RDS_DATABASE_FI": "bbfi",
        "RDS_PROXY_ENDPOINT_REWARD": "rds-proxy-stg-clr.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
        "RDS_IAM_USER_REWARD": "rds_proxy_stg_clr",
        "RDS_DATABASE_REWARD": "buzz_reward",
        "SECRETNAME": "stg/sqs/key"
      },
      "deploymentBucketObject": {
        "name": "buzz-serverless-stg",
        "serverSideEncryption": "AES256"
      },
      "versionFunctions": true,
      "remoteFunctionData": null,
      "alias": "stg",
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "GetPointBalanceHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/member-info-api-stg-getPointBalanceHandler",
              "RetentionInDays": 30
            }
          },
          "GetAccountsHandlerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/member-info-api-stg-getAccountsHandler",
              "RetentionInDays": 30
            }
          },
          "GetFiSettingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/member-info-api-stg-getFiSettings",
              "RetentionInDays": 30
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "stg",
                        "member-info-api",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/member-info-api-stg*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/member-info-api-stg*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "member-info-api",
                    "stg",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "GetPointBalanceHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "buzz-serverless-stg",
                "S3Key": "serverless/member-info-api/stg/1631990812226-2021-09-18T18:46:52.226Z/member-info-api.zip"
              },
              "FunctionName": "member-info-api-stg-getPointBalanceHandler",
              "Handler": "controller/points.getPointBalanceHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "LOGGING_LEVEL": "debug",
                  "REGION": "us-east-1",
                  "GET_LIFEUSER_POINTS": "https://stg.api.givesrewards.com/points",
                  "GET_LIFEUSER_ACCOUNTS": "https://stg.api.givesrewards.com/account/accounts",
                  "RDS_PROXY_ENDPOINT_GLOBAL": "rds-proxy-stg-glbl.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_GLOBAL": "rds_proxy_stg_glbl",
                  "RDS_DATABASE_GLOBAL": "bbglobal",
                  "RDS_TEST": "= cqscgqylfsoo",
                  "RDS_PROXY_FI_ENDPOINT": "rds-proxy-stg-fi.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_FI": "rds_proxy_stg_fi",
                  "RDS_DATABASE_FI": "bbfi",
                  "RDS_PROXY_ENDPOINT_REWARD": "rds-proxy-stg-clr.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_REWARD": "rds_proxy_stg_clr",
                  "RDS_DATABASE_REWARD": "buzz_reward",
                  "SECRETNAME": "stg/sqs/key"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetPointBalanceHandlerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetPointBalanceHandlerLambdaVersionM5xjZBP5oYqHL9aFuYjsAl9cKVmCiZKXmNwDDhtdA4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetPointBalanceHandlerLambdaFunction"
              },
              "CodeSha256": "iVMTDRnQnH9OBKJIZRNh5y3FJoE93ia7osqHN2KZIuY="
            }
          },
          "GetAccountsHandlerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "buzz-serverless-stg",
                "S3Key": "serverless/member-info-api/stg/1631990812226-2021-09-18T18:46:52.226Z/member-info-api.zip"
              },
              "FunctionName": "member-info-api-stg-getAccountsHandler",
              "Handler": "controller/accounts.getAccountsHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "LOGGING_LEVEL": "debug",
                  "REGION": "us-east-1",
                  "GET_LIFEUSER_POINTS": "https://stg.api.givesrewards.com/points",
                  "GET_LIFEUSER_ACCOUNTS": "https://stg.api.givesrewards.com/account/accounts",
                  "RDS_PROXY_ENDPOINT_GLOBAL": "rds-proxy-stg-glbl.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_GLOBAL": "rds_proxy_stg_glbl",
                  "RDS_DATABASE_GLOBAL": "bbglobal",
                  "RDS_TEST": "= cqscgqylfsoo",
                  "RDS_PROXY_FI_ENDPOINT": "rds-proxy-stg-fi.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_FI": "rds_proxy_stg_fi",
                  "RDS_DATABASE_FI": "bbfi",
                  "RDS_PROXY_ENDPOINT_REWARD": "rds-proxy-stg-clr.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_REWARD": "rds_proxy_stg_clr",
                  "RDS_DATABASE_REWARD": "buzz_reward",
                  "SECRETNAME": "stg/sqs/key"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetAccountsHandlerLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "GetAccountsHandlerLambdaVersionPJbgsoZRt9m1cpbvn0Gwt4vIfdyUHnPJd5xJXff60": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAccountsHandlerLambdaFunction"
              },
              "CodeSha256": "iVMTDRnQnH9OBKJIZRNh5y3FJoE93ia7osqHN2KZIuY="
            }
          },
          "GetFiSettingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "buzz-serverless-stg",
                "S3Key": "serverless/member-info-api/stg/1631990812226-2021-09-18T18:46:52.226Z/member-info-api.zip"
              },
              "FunctionName": "member-info-api-stg-getFiSettings",
              "Handler": "controller/fi-settings.getFiSettingsHandler",
              "MemorySize": 1024,
              "Role": {
                "Fn::GetAtt": [
                  "GetFiSettingsIamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "nodejs12.x",
              "Timeout": 30,
              "Environment": {
                "Variables": {
                  "LOGGING_LEVEL": "debug",
                  "REGION": "us-east-1",
                  "GET_LIFEUSER_POINTS": "https://stg.api.givesrewards.com/points",
                  "GET_LIFEUSER_ACCOUNTS": "https://stg.api.givesrewards.com/account/accounts",
                  "RDS_PROXY_ENDPOINT_GLOBAL": "rds-proxy-stg-glbl.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_GLOBAL": "rds_proxy_stg_glbl",
                  "RDS_DATABASE_GLOBAL": "bbglobal",
                  "RDS_TEST": "= cqscgqylfsoo",
                  "RDS_PROXY_FI_ENDPOINT": "rds-proxy-stg-fi.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_FI": "rds_proxy_stg_fi",
                  "RDS_DATABASE_FI": "bbfi",
                  "RDS_PROXY_ENDPOINT_REWARD": "rds-proxy-stg-clr.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
                  "RDS_IAM_USER_REWARD": "rds_proxy_stg_clr",
                  "RDS_DATABASE_REWARD": "buzz_reward",
                  "SECRETNAME": "stg/sqs/key"
                }
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetFiSettingsIamRoleLambdaExecution",
              "GetFiSettingsLogGroup"
            ]
          },
          "GetFiSettingsLambdaVersionSUlIpGfvkyzuBsBeFUwS8uVDy1pAkdRXVpiPLFQy3RY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFiSettingsLambdaFunction"
              },
              "CodeSha256": "iVMTDRnQnH9OBKJIZRNh5y3FJoE93ia7osqHN2KZIuY="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "stg-member-info-api",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourcePoints": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "points",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourcePointsBalance": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourcePoints"
              },
              "PathPart": "balance",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccounts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "accounts",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAccountsLifeuseridVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAccounts"
              },
              "PathPart": "{lifeuserid}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFisettings": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "fisettings",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFisettingsFiVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFisettings"
              },
              "PathPart": "{fi}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPointsBalanceOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agen'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourcePointsBalance"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAccountsLifeuseridVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agen'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccountsLifeuseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFisettingsFiVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceFisettingsFiVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodPointsBalanceGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourcePointsBalance"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetPointBalanceHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodAccountsLifeuseridVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAccountsLifeuseridVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAccountsHandlerLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "ApiGatewayMethodFisettingsFiVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFisettingsFiVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "AuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFiSettingsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": "AuthorizerApiGatewayAuthorizer"
          },
          "AuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 0,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "authorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    "arn:aws:lambda:us-east-1:127301922222:function:authorizer-api-stg-authorizer",
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1631990784133": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "stg"
            },
            "DependsOn": [
              "ApiGatewayMethodPointsBalanceOptions",
              "ApiGatewayMethodAccountsLifeuseridVarOptions",
              "ApiGatewayMethodFisettingsFiVarOptions",
              "ApiGatewayMethodPointsBalanceGet",
              "ApiGatewayMethodAccountsLifeuseridVarGet",
              "ApiGatewayMethodFisettingsFiVarGet"
            ]
          },
          "GetPointBalanceHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetPointBalanceHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": "arn:aws:lambda:us-east-1:127301922222:function:authorizer-api-stg-authorizer",
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "GetAccountsHandlerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAccountsHandlerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFiSettingsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFiSettingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ApiGatewayLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/api-gateway/member-info-api-stg",
              "RetentionInDays": 30
            }
          },
          "CustomApiGatewayAccountCloudWatchRole": {
            "Type": "Custom::ApiGatewayAccountRole",
            "Version": 1,
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashapigwDashcwDashroleLambdaFunction",
                  "Arn"
                ]
              }
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "stg",
                        "member-info-api",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "iam:",
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "role/*"
                            ]
                          ]
                        },
                        "Action": [
                          "iam:AttachRolePolicy",
                          "iam:CreateRole",
                          "iam:ListAttachedRolePolicies",
                          "iam:PassRole"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "apigateway:*::/account"
                            ]
                          ]
                        },
                        "Action": [
                          "apigateway:GET",
                          "apigateway:PATCH"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashapigwDashcwDashroleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "buzz-serverless-stg",
                "S3Key": "serverless/member-info-api/stg/1631990812226-2021-09-18T18:46:52.226Z/custom-resources.zip"
              },
              "FunctionName": "member-info-api-stg-custom-resource-apigw-cw-role",
              "Handler": "apiGatewayCloudWatchRole/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs12.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "GetFiSettingsIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "stg",
                        "member-info-api",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/member-info-api-stg-getFiSettings:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "dynamodb:Query",
                          "dynamodb:Scan",
                          "dynamodb:GetItem",
                          "dynamodb:PutItem",
                          "dynamodb:UpdateItem",
                          "dynamodb:DeleteItem"
                        ],
                        "Resource": [
                          "arn:aws:dynamodb:us-east-1:127301922222:table/fi-settings"
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "member-info-api",
                    "stg",
                    "getFiSettings",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_5XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "buzz-serverless-stg"
          },
          "GetPointBalanceHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetPointBalanceHandlerLambdaVersionM5xjZBP5oYqHL9aFuYjsAl9cKVmCiZKXmNwDDhtdA4"
            }
          },
          "GetAccountsHandlerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAccountsHandlerLambdaVersionPJbgsoZRt9m1cpbvn0Gwt4vIfdyUHnPJd5xJXff60"
            }
          },
          "GetFiSettingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFiSettingsLambdaVersionSUlIpGfvkyzuBsBeFUwS8uVDy1pAkdRXVpiPLFQy3RY"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/stg"
                ]
              ]
            }
          }
        }
      },
      "aliasUserResources": {
        "Resources": {
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "GatewayResponseDefault5XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_5XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          }
        }
      }
    },
    "custom": {
      "serviceName": "member-info",
      "aws_id": {
        "dev": "459587843023",
        "qa": "459587843023",
        "stg": "127301922222",
        "prod": "127301922222"
      },
      "points": {
        "dev": "dev.",
        "qa": "qa.",
        "stg": "stg.",
        "prod": ""
      },
      "loggingLevel": {
        "dev": "debug",
        "qa": "debug",
        "stg": "debug",
        "prod": "debug"
      },
      "authorizer": "arn:aws:lambda:us-east-1:127301922222:function:authorizer-api-stg-authorizer",
      "rds_proxy_fi": "rds-proxy-stg-fi.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
      "rds_proxy_global": "rds-proxy-stg-glbl.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
      "rds_proxy_reward": "rds-proxy-stg-clr.proxy-cqscgqylfsoo.us-east-1.rds.amazonaws.com",
      "rds_test": "cqscgqylfsoo",
      "customDomain": {
        "domainName": "stg.api.givesrewards.com",
        "stage": "stg",
        "createRoute53Record": true,
        "certificateName": "*.api.givesrewards.com",
        "basePath": "member-info",
        "endpointType": "edge"
      },
      "customDomainName": {
        "dev": "stg.api.givesrewards.com",
        "qa": "stg.api.givesrewards.com",
        "stg": "stg.api.givesrewards.com",
        "prod": "api.givesrewards.com"
      },
      "customCertificateName": {
        "dev": "*.api.givesrewards.com",
        "qa": "*.api.givesrewards.com",
        "stg": "*.api.givesrewards.com",
        "prod": "*.givesrewards.com"
      }
    },
    "plugins": [
      "serverless-domain-manager",
      "serverless-iam-roles-per-function",
      "serverless-aws-alias",
      "serverless-jest-plugin"
    ],
    "pluginsData": {},
    "functions": {
      "getPointBalanceHandler": {
        "handler": "controller/points.getPointBalanceHandler",
        "events": [
          {
            "http": {
              "path": "points/balance",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agen"
                ],
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": "arn:aws:lambda:us-east-1:127301922222:function:authorizer-api-stg-authorizer",
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "member-info-api-stg-getPointBalanceHandler",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetPointBalanceHandlerLambdaVersionM5xjZBP5oYqHL9aFuYjsAl9cKVmCiZKXmNwDDhtdA4"
      },
      "getAccountsHandler": {
        "handler": "controller/accounts.getAccountsHandler",
        "events": [
          {
            "http": {
              "path": "accounts/{lifeuserid}",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agen"
                ],
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": "arn:aws:lambda:us-east-1:127301922222:function:authorizer-api-stg-authorizer",
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "member-info-api-stg-getAccountsHandler",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetAccountsHandlerLambdaVersionPJbgsoZRt9m1cpbvn0Gwt4vIfdyUHnPJd5xJXff60"
      },
      "getFiSettings": {
        "handler": "controller/fi-settings.getFiSettingsHandler",
        "events": [
          {
            "http": {
              "path": "fisettings/{fi}",
              "method": "get",
              "cors": {
                "origin": "*",
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent"
                ],
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "token",
                "name": "authorizer",
                "arn": "arn:aws:lambda:us-east-1:127301922222:function:authorizer-api-stg-authorizer",
                "resultTtlInSeconds": 0,
                "identitySource": "method.request.header.Authorization",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetFiSettingsIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][1]"
          }
        ],
        "name": "member-info-api-stg-getFiSettings",
        "package": {},
        "memory": 1024,
        "timeout": 30,
        "runtime": "nodejs12.x",
        "vpc": {},
        "versionLogicalId": "GetFiSettingsLambdaVersionSUlIpGfvkyzuBsBeFUwS8uVDy1pAkdRXVpiPLFQy3RY"
      }
    },
    "resources": {
      "Resources": {
        "GatewayResponseDefault4XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "GatewayResponseDefault5XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_5XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        }
      },
      "Outputs": {}
    },
    "serviceFilename": "serverless.yml",
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "C:\\Users\\18502\\Lambda\\member-info-service\\.serverless\\member-info-api.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/member-info-api/stg/1631990812226-2021-09-18T18:46:52.226Z",
    "artifact": "member-info-api.zip"
  }
}